q_l_s <- createQueryIntensity(colName = "intensityEV", intensities = c("light"),dayType=dt, tomin,q_data=q_wearobs)
q_s_s <- createQueryIntensity(colName = "intensityEV", intensities = c("sedentary"),dayType=dt, tomin,q_data=q_wearobs)
#Query: Mean daily total intensity counts (weekend)
q_MeanActCounts_s <- paste("SELECT avg(Counts) as ", dt,"MeanActCounts
FROM
(SELECT day_m2m, sum(axis1) as Counts, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: Mean intensity count per minute (weekend)
q_MeanIntenPerMin_s <- paste("SELECT avg(axis1)*1.0*",tomin," as ", dt,"MeanIntenPerMin FROM
(",q_wearobs,")",sep = "")
allqueries <- c(q_nvd,q_nvd_wk,q_nvd_wd,
q_MeanWakeWear,q_MeanSleepNW,q_mv,q_v,q_m,q_l,q_s,q_MeanActCounts,q_MeanIntenPerMin,
q_MeanWakeWear_wk,q_MeanSleepNW_wk,q_mv_wk,q_v_wk,q_m_wk,q_l_wk,q_s_wk,q_MeanActCounts_wk,q_MeanIntenPerMin_wk,
q_MeanWakeWear_wd,q_MeanSleepNW_wd,q_mv_wd,q_v_wd,q_m_wd,q_l_wd,q_s_wd,q_MeanActCounts_wd,q_MeanIntenPerMin_wd,
q_MeanWakeWear_s,q_MeanSleepNW_s,q_mv_s,q_v_s,q_m_s,q_l_s,q_s_s,q_MeanActCounts_s,q_MeanIntenPerMin_s)
allqueries <- sapply(allqueries, FUN = function(i) (paste("(",i,")", sep ="")))
allqueries <- paste(allqueries, collapse=" , ", sep=" , ")
q_full <- paste("SELECT *  FROM", allqueries)
obs <- sqldf(q_full)
valid <- ifelse(obs$valwkdays>=3 && obs$valwkend>=1,1,0)
valid <- as.data.frame(valid)
obs <- cbind(Pinfo, valid, obs)
return(obs)
q<- "SELECT day_m2m, day_n2n, count(axis1) as MeanSleepNW FROM data
WHERE activity = 'sleep' GROUP BY day_n2n"
q<- "SELECT day_m2m, day_n2n, count(axis1) as MeanSleepNW FROM data
WHERE activity = 'non-wear' GROUP BY day_n2n"
}
tryCatch(main(),finally=sink())
main <- function(){
inputdir <- "E:\\MUEVETE ESCOLAR"
outputdir <- ".\\output"
outputfile <- paste("COL MUEVETE",as.Date(Sys.time()),".csv", sep="")
#Time
tnow <- Sys.time()
#Final data set
adata <- data.frame()
#Open Log output
#sink(paste0(outputdir,"\\log_",as.Date(Sys.time()),".txt"))
cat("Log output:\n")
#Get datafiles names
dataFiles <- findagds(inputdir)
dataFiles$validsize <- dataFiles$size >= 10 #Files greater than 10MB
dataFiles$epoch <- -1 #Initialization of epoch in -1
for (i in 1:nrow(dataFiles)){
cat("\t",dataFiles$name[i])
if(dataFiles$validsize[i] == FALSE){
cat("........SKIPPED (Wrong size) \n")
next #If the .agd file have less than 10 MB, it will not be analyzed
}
#Garbage collector
gc()
#Database location
dbDir <- dataFiles$agdpath[i]
#0. Read data form the .agd files (SQLite database)
db <- readDatabase(dbDir)
data <- db$data
settings <- db$settings
udays <- unique(as.Date(data$datetime))
firstday <- min(udays)
validdays <- seq(firstday,firstday+8,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data <- removeData(data,toremove=c(daystoremove),units="days")
#1. Quality control checks
#valid <- qualityControlCheck(dbDir,data, settings, pack)
valid <- T
dataFiles$epoch[i] <- as.numeric(data$datetime[2]-data$datetime[1], units="secs")
if(dataFiles$epoch[i] == 1){
#2 Data aggregation
data15 <- aggregation(15, data)
data60 <- aggregation(60, data)
data15$activity <- rep("wear",nrow(data15)) #Activity (sleep, non-wear, wear/wake)
data60$activity <- rep("wear",nrow(data60)) #Activity (sleep, non-wear, wear/wake)
#3. Sleep period
sleep <- sleepPeriods(data=data60,sleepOnsetHours= c(19,5), bedTimemin = 5,
tolBsleepMatrix = matrix(c(0,24,10),1,3,byrow=T),
tolMatrix = matrix(c(0,5,20,
5,19,10,
19,24,20),3,3,byrow=T),
minSleepTime = 160, scanParam = "axis1",
nonWearPSleep = T, nonWearInact = 90, nonWearTol = 2,
nonWearscanParam = "axis1",
overlap_frac = 0.9)
data60$activity <- setActivitySNW(data60$activity,label="sleep",intv=sleep$sleep,minlength = 20)
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",intv=sleep$sleepnw, minlength = 20)
#4. Non-wear period
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=40,tolerance=2) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove,lastday),units="days")
data60 <- removeData(data60,toremove=c(daystoremove,lastday),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dataFiles$name[i],data15, timeunit="min")
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
sink()
write.csv(adata,file=paste0(outputdir,"\\",outputfile), row.names=F)
write.csv(dataFiles,file=paste0(outputdir,"\\",outputfile,"agd_info.csv"), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
#=================================================================================
tryCatch(main(),finally=sink())
sink()
main <- function(){
inputdir <- "E:\\MUEVETE ESCOLAR"
outputdir <- ".\\output"
outputfile <- paste("COL MUEVETE",as.Date(Sys.time()),".csv", sep="")
#Time
tnow <- Sys.time()
#Final data set
adata <- data.frame()
#Open Log output
sink(paste0(outputdir,"\\log_",as.Date(Sys.time()),".txt"))
cat("Log output:\n")
#Get datafiles names
dataFiles <- findagds(inputdir)
dataFiles$validsize <- dataFiles$size >= 10 #Files greater than 10MB
dataFiles$epoch <- -1 #Initialization of epoch in -1
for (i in 1:nrow(dataFiles)){
cat("\t",dataFiles$name[i])
if(dataFiles$validsize[i] == FALSE){
cat("........SKIPPED (Wrong size) \n")
next #If the .agd file have less than 10 MB, it will not be analyzed
}
#Garbage collector
gc()
#Database location
dbDir <- dataFiles$agdpath[i]
#0. Read data form the .agd files (SQLite database)
db <- readDatabase(dbDir)
data <- db$data
settings <- db$settings
udays <- unique(as.Date(data$datetime))
firstday <- min(udays)
validdays <- seq(firstday,firstday+8,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data <- removeData(data,toremove=c(daystoremove),units="days")
#1. Quality control checks
#valid <- qualityControlCheck(dbDir,data, settings, pack)
valid <- T
dataFiles$epoch[i] <- as.numeric(data$datetime[2]-data$datetime[1], units="secs")
if(dataFiles$epoch[i] == 1){
#2 Data aggregation
data15 <- aggregation(15, data)
data60 <- aggregation(60, data)
data15$activity <- rep("wear",nrow(data15)) #Activity (sleep, non-wear, wear/wake)
data60$activity <- rep("wear",nrow(data60)) #Activity (sleep, non-wear, wear/wake)
#3. Sleep period
sleep <- sleepPeriods(data=data60,sleepOnsetHours= c(19,5), bedTimemin = 5,
tolBsleepMatrix = matrix(c(0,24,10),1,3,byrow=T),
tolMatrix = matrix(c(0,5,20,
5,19,10,
19,24,20),3,3,byrow=T),
minSleepTime = 160, scanParam = "axis1",
nonWearPSleep = T, nonWearInact = 90, nonWearTol = 2,
nonWearscanParam = "axis1",
overlap_frac = 0.9)
data60$activity <- setActivitySNW(data60$activity,label="sleep",intv=sleep$sleep,minlength = 20)
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",intv=sleep$sleepnw, minlength = 20)
#4. Non-wear period
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=40,tolerance=2) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove,lastday),units="days")
data60 <- removeData(data60,toremove=c(daystoremove,lastday),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dataFiles$name[i],data15, timeunit="min")
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
sink()
write.csv(adata,file=paste0(outputdir,"\\",outputfile), row.names=F)
write.csv(dataFiles,file=paste0(outputdir,"\\",outputfile,"agd_info.csv"), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
#=================================================================================
tryCatch(main(),finally=sink())
dataFiles
main <- function(){
inputdir <- "E:\\MUEVETE ESCOLAR"
outputdir <- ".\\output"
outputfile <- paste("COL MUEVETE",as.Date(Sys.time()),".csv", sep="")
#Time
tnow <- Sys.time()
#Final data set
adata <- data.frame()
#Open Log output
sink(paste0(outputdir,"\\log_",as.Date(Sys.time()),".txt"))
cat("Log output:\n")
#Get datafiles names
dataFiles <- findagds(inputdir)
dataFiles$validsize <- dataFiles$size >= 10 #Files greater than 10MB
dataFiles$epoch <- -1 #Initialization of epoch in -1
for (i in 1:nrow(dataFiles)){
cat("\t",dataFiles$name[i])
if(dataFiles$validsize[i] == FALSE){
cat("........SKIPPED (Wrong size) \n")
next #If the .agd file have less than 10 MB, it will not be analyzed
}
#Garbage collector
gc()
#Database location
dbDir <- dataFiles$agdpath[i]
#0. Read data form the .agd files (SQLite database)
db <- readDatabase(dbDir)
data <- db$data
settings <- db$settings
udays <- unique(as.Date(data$datetime))
firstday <- min(udays)
validdays <- seq(firstday,firstday+8,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data <- removeData(data,toremove=c(daystoremove),units="days")
#1. Quality control checks
#valid <- qualityControlCheck(dbDir,data, settings, pack)
valid <- T
dataFiles$epoch[i] <- as.numeric(data$datetime[2]-data$datetime[1], units="secs")
if(dataFiles$epoch[i] == 1){
#2 Data aggregation
data15 <- aggregation(15, data)
data60 <- aggregation(60, data)
data15$activity <- rep("wear",nrow(data15)) #Activity (sleep, non-wear, wear/wake)
data60$activity <- rep("wear",nrow(data60)) #Activity (sleep, non-wear, wear/wake)
#3. Sleep period
sleep <- sleepPeriods(data=data60,sleepOnsetHours= c(19,5), bedTimemin = 5,
tolBsleepMatrix = matrix(c(0,24,10),1,3,byrow=T),
tolMatrix = matrix(c(0,5,20,
5,19,10,
19,24,20),3,3,byrow=T),
minSleepTime = 160, scanParam = "axis1",
nonWearPSleep = T, nonWearInact = 90, nonWearTol = 2,
nonWearscanParam = "axis1",
overlap_frac = 0.9)
data60$activity <- setActivitySNW(data60$activity,label="sleep",intv=sleep$sleep,minlength = 20)
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",intv=sleep$sleepnw, minlength = 20)
#4. Non-wear period
#ISCOLE non-wear 20 +-0min
#ACTILIFE non-wear 60 +-2min
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=20,tolerance=0) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove,lastday),units="days")
data60 <- removeData(data60,toremove=c(daystoremove,lastday),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dataFiles$name[i],data15, timeunit="min")
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
sink()
write.csv(adata,file=paste0(outputdir,"\\",outputfile), row.names=F)
write.csv(dataFiles,file=paste0(outputdir,"\\",outputfile,"agd_info.csv"), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
#=================================================================================
tryCatch(main(),finally=sink())
main <- function(){
inputdir <- "E:\\MUEVETE ESCOLAR"
outputdir <- ".\\output"
outputfile <- paste("COL MUEVETE",as.Date(Sys.time()),".csv", sep="")
#Time
tnow <- Sys.time()
#Final data set
adata <- data.frame()
#Open Log output
sink(paste0(outputdir,"\\log_",as.Date(Sys.time()),".txt"))
cat("Log output:\n")
#Get datafiles names
dataFiles <- findagds(inputdir)
dataFiles$validsize <- dataFiles$size >= 2 #Files greater than 2MB
dataFiles$epoch <- -1 #Initialization of epoch in -1
for (i in 1:nrow(dataFiles)){
cat("\t",dataFiles$name[i])
if(dataFiles$validsize[i] == FALSE){
cat("........SKIPPED (Wrong size) \n")
next #If the .agd file have less than 10 MB, it will not be analyzed
}
#Garbage collector
gc()
#Database location
dbDir <- dataFiles$agdpath[i]
#0. Read data form the .agd files (SQLite database)
db <- readDatabase(dbDir)
data <- db$data
settings <- db$settings
udays <- unique(as.Date(data$datetime))
firstday <- min(udays)
validdays <- seq(firstday,firstday+8,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data <- removeData(data,toremove=c(daystoremove),units="days")
#1. Quality control checks
#valid <- qualityControlCheck(dbDir,data, settings, pack)
valid <- T
dataFiles$epoch[i] <- as.numeric(data$datetime[2]-data$datetime[1], units="secs")
if(dataFiles$epoch[i] == 1){
#2 Data aggregation
data15 <- aggregation(15, data)
data60 <- aggregation(60, data)
data15$activity <- rep("wear",nrow(data15)) #Activity (sleep, non-wear, wear/wake)
data60$activity <- rep("wear",nrow(data60)) #Activity (sleep, non-wear, wear/wake)
#3. Sleep period
sleep <- sleepPeriods(data=data60,sleepOnsetHours= c(19,5), bedTimemin = 5,
tolBsleepMatrix = matrix(c(0,24,10),1,3,byrow=T),
tolMatrix = matrix(c(0,5,20,
5,19,10,
19,24,20),3,3,byrow=T),
minSleepTime = 160, scanParam = "axis1",
nonWearPSleep = T, nonWearInact = 90, nonWearTol = 2,
nonWearscanParam = "axis1",
overlap_frac = 0.9)
data60$activity <- setActivitySNW(data60$activity,label="sleep",intv=sleep$sleep,minlength = 20)
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",intv=sleep$sleepnw, minlength = 20)
#4. Non-wear period
#ISCOLE non-wear 20 +-0min
#ACTILIFE non-wear 60 +-2min
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=60,tolerance=2) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove,lastday),units="days")
data60 <- removeData(data60,toremove=c(daystoremove,lastday),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dataFiles$name[i],data15, timeunit="min")
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
sink()
write.csv(adata,file=paste0(outputdir,"\\",outputfile), row.names=F)
write.csv(dataFiles,file=paste0(outputdir,"\\",outputfile,"agd_info.csv"), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
#=================================================================================
tryCatch(main(),finally=sink())
only <- c('015212_9120320_T01sec.agd','015219_6100142_T0.agd','024101_5100166_T060sec.agd','024104_2110491_T01sec60sec.agd','024120_2110471_T010sec.agd','024216_2110485_T01sec.agd','074106_6100191_T0.agd','074109_2110486_T01sec.agd','074221_9120429_T01sec60sec.agd','085123_2110506_T010sec.agd','094221_2110521_T0_21sec.agd','094221_2110521_T01sec.agd','014112_6100181_T1.agd','054104_5100074_T1.agd','054129_2110508__T11sec.agd','054203_2110509_T110sec.agd','065101_2110472_T110sec.agd','085213_6100003_T1.agd','095122_6100082_T1.agd')
inputdir <- "E:\\MUEVETE ESCOLAR"
dataFiles <- findagds(inputdir)
dataFiles
dataFiles[dataFiles %in% only,]
only <- c('015212_9120320_T01sec.agd','015219_6100142_T0.agd','024101_5100166_T060sec.agd','024104_2110491_T01sec60sec.agd','024120_2110471_T010sec.agd','024216_2110485_T01sec.agd','074106_6100191_T0.agd','074109_2110486_T01sec.agd','074221_9120429_T01sec60sec.agd','085123_2110506_T010sec.agd','094221_2110521_T0_21sec.agd','094221_2110521_T01sec.agd','014112_6100181_T1.agd','054104_5100074_T1.agd','054129_2110508__T11sec.agd','054203_2110509_T110sec.agd','065101_2110472_T110sec.agd','085213_6100003_T1.agd','095122_6100082_T1.agd')
only
dataFiles[dataFiles$name %in% only,]
main <- function(){
inputdir <- "E:\\MUEVETE ESCOLAR"
outputdir <- ".\\output"
outputfile <- paste("COL MUEVETE",as.Date(Sys.time()),".csv", sep="")
#Time
tnow <- Sys.time()
#Final data set
adata <- data.frame()
#Open Log output
sink(paste0(outputdir,"\\log_",as.Date(Sys.time()),".txt"))
cat("Log output:\n")
#Get datafiles names
only <- c('015212_9120320_T01sec.agd','015219_6100142_T0.agd','024101_5100166_T060sec.agd','024104_2110491_T01sec60sec.agd','024120_2110471_T010sec.agd','024216_2110485_T01sec.agd','074106_6100191_T0.agd','074109_2110486_T01sec.agd','074221_9120429_T01sec60sec.agd','085123_2110506_T010sec.agd','094221_2110521_T0_21sec.agd','094221_2110521_T01sec.agd','014112_6100181_T1.agd','054104_5100074_T1.agd','054129_2110508__T11sec.agd','054203_2110509_T110sec.agd','065101_2110472_T110sec.agd','085213_6100003_T1.agd','095122_6100082_T1.agd')
dataFiles <- findagds(inputdir)
dataFiles$validsize <- dataFiles$size >= 2 #Files greater than 2MB
dataFiles$epoch <- -1 #Initialization of epoch in -1
dataFiles <- dataFiles[dataFiles$name %in% only,]
for (i in 1:nrow(dataFiles)){
cat("\t",dataFiles$name[i])
if(dataFiles$validsize[i] == FALSE){
cat("........SKIPPED (Wrong size) \n")
next #If the .agd file have less than 10 MB, it will not be analyzed
}
#Garbage collector
gc()
#Database location
dbDir <- dataFiles$agdpath[i]
#0. Read data form the .agd files (SQLite database)
db <- readDatabase(dbDir)
data <- db$data
settings <- db$settings
udays <- unique(as.Date(data$datetime))
firstday <- min(udays)
validdays <- seq(firstday,firstday+8,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data <- removeData(data,toremove=c(daystoremove),units="days")
#1. Quality control checks
#valid <- qualityControlCheck(dbDir,data, settings, pack)
valid <- T
dataFiles$epoch[i] <- as.numeric(data$datetime[2]-data$datetime[1], units="secs")
if(dataFiles$epoch[i] == 1){
#2 Data aggregation
data15 <- aggregation(15, data)
data60 <- aggregation(60, data)
data15$activity <- rep("wear",nrow(data15)) #Activity (sleep, non-wear, wear/wake)
data60$activity <- rep("wear",nrow(data60)) #Activity (sleep, non-wear, wear/wake)
#3. Sleep period
sleep <- sleepPeriods(data=data60,sleepOnsetHours= c(19,5), bedTimemin = 5,
tolBsleepMatrix = matrix(c(0,24,10),1,3,byrow=T),
tolMatrix = matrix(c(0,5,20,
5,19,10,
19,24,20),3,3,byrow=T),
minSleepTime = 160, scanParam = "axis1",
nonWearPSleep = T, nonWearInact = 90, nonWearTol = 2,
nonWearscanParam = "axis1",
overlap_frac = 0.9)
data60$activity <- setActivitySNW(data60$activity,label="sleep",intv=sleep$sleep,minlength = 20)
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",intv=sleep$sleepnw, minlength = 20)
#4. Non-wear period
#ISCOLE non-wear 20 +-0min
#ACTILIFE non-wear 60 +-2min
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=20,tolerance=0) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove,lastday),units="days")
data60 <- removeData(data60,toremove=c(daystoremove,lastday),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dataFiles$name[i],data15, timeunit="min")
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
sink()
write.csv(adata,file=paste0(outputdir,"\\",outputfile), row.names=F)
write.csv(dataFiles,file=paste0(outputdir,"\\",outputfile,"agd_info.csv"), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
#=================================================================================
tryCatch(main(),finally=sink())
