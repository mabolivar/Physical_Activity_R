data60 <- removeData(data60,toremove=c(rmhours),units="hours")
#4. Non-wear period
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=20,tolerance=0) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove),units="days")
data60 <- removeData(data60,toremove=c(daystoremove),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dbDir,data15, timeunit="min", minweartime=200)
#Copies the final data frame in the clipboard
#write.csv(ob,file="clipboard", row.names=F)
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
}
sink()
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
tryCatch(main(),finally=sink())
main <- function(){
#Time
tnow <- Sys.time()
#Final data set
adata <- data.frame()
#Get datafiles names
dataFiles <- dir(inputdir)
#Open Log output
sink(paste(outputdir,"\\log.txt",collapse="",sep=""))
cat("Log output:\n")
for (d in dataFiles){
#Database location
dbDir <- paste(inputdir,"\\",d,sep="")
cat(d)
valid<-T
#Checks file size
if(file.info(dbDir)$size/1000<8000){
cat("...........Wrong file size\n")
}else{
#0. Read data form the .agd files (SQLite database)
db <- readDatabase(dbDir)
data <- db$data
settings <- db$settings
#1. Quality control checks
epoch <- as.numeric(data[2,1]-data[1,1], units="secs")
if(epoch == 1){
#2 Data aggregation
data15 <- aggregation(15, data)
data60 <- aggregation(60, data)
data15$activity <- rep("wear",nrow(data15)) #Activity (sleep, non-wear, wear/wake)
data60$activity <- rep("wear",nrow(data60)) #Activity (sleep, non-wear, wear/wake)
#2.5. Cleaning (Remove invalid days day of data)
udays <- unique(as.Date(data60$datetime))
lastday <- max(udays)
valdays <- seq(from = as.Date("2014-06-12"),to = as.Date("2014-06-19"), by =1)
rmday <- udays[!(udays %in% valdays)]
data15 <- removeData(data15,toremove=c(rmday),units="days")
data60 <- removeData(data60,toremove=c(rmday),units="days")
#3. Cleaning (Remove sleep hours)
rmhours <- c(seq(0,5),seq(22,23))
data15 <- removeData(data15,toremove=c(rmhours),units="hours")
data60 <- removeData(data60,toremove=c(rmhours),units="hours")
#4. Non-wear period
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=20,tolerance=0) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove),units="days")
data60 <- removeData(data60,toremove=c(daystoremove),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dbDir,data15, timeunit="min", minweartime=200)
#Copies the final data frame in the clipboard
#write.csv(ob,file="clipboard", row.names=F)
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
}
sink()
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
#=============================================================================
tryCatch(main(),finally=sink())
main <- function(){
#Time
tnow <- Sys.time()
#Final data set
adata <- data.frame()
#Get datafiles names
dataFiles <- dir(inputdir)
#Open Log output
sink(paste(outputdir,"\\log.txt",collapse="",sep=""))
cat("Log output:\n")
for (d in dataFiles){
#Database location
dbDir <- paste(inputdir,"\\",d,sep="")
cat(d)
valid<-T
#Checks file size
if(file.info(dbDir)$size/1000<8000){
cat("...........Wrong file size\n")
}else{
#0. Read data form the .agd files (SQLite database)
db <- readDatabase(dbDir)
data <- db$data
settings <- db$settings
#1. Quality control checks
epoch <- as.numeric(data[2,1]-data[1,1], units="secs")
if(epoch == 1){
#2 Data aggregation
data15 <- aggregation(15, data)
data60 <- aggregation(60, data)
data15$activity <- rep("wear",nrow(data15)) #Activity (sleep, non-wear, wear/wake)
data60$activity <- rep("wear",nrow(data60)) #Activity (sleep, non-wear, wear/wake)
#2.5. Cleaning (Remove invalid days day of data)
udays <- unique(as.Date(data60$datetime))
lastday <- max(udays)
valdays <- seq(from = as.Date("2014-06-12"),to = as.Date("2014-06-19"), by =1)
rmday <- udays[!(udays %in% valdays)]
data15 <- removeData(data15,toremove=c(rmday),units="days")
data60 <- removeData(data60,toremove=c(rmday),units="days")
#3. Cleaning (Remove sleep hours)
rmhours <- c(seq(0,5),seq(22,23))
data15 <- removeData(data15,toremove=c(rmhours),units="hours")
data60 <- removeData(data60,toremove=c(rmhours),units="hours")
#4. Non-wear period
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=20,tolerance=0) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove),units="days")
data60 <- removeData(data60,toremove=c(daystoremove),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dbDir,data15, timeunit="min", minweartime=200)
#Copies the final data frame in the clipboard
#write.csv(ob,file="clipboard", row.names=F)
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
}
sink()
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
#=============================================================================
tryCatch(main(),finally=sink())
adata
m<-regexec("\\\\[[:print:]]+\\\\([[:digit:]]+)([A-Z])([[:digit:]]).([[:digit:]]+).([[:digit:]]+)",dbDir)
dbDir
m<-regexec("\\\\[[:print:]]+\\\\([A-Z]){3},dbDir)
m<-regexec("\\\\[[:print:]]+\\\\([A-Z]){3}",dbDir)
regmatches(dbDir, m)
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]]",dbDir)
regmatches(dbDir, m)
[[:digit:]]{5}
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}",dbDir)
regmatches(dbDir, m)
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}([[:digit:]]{5})",dbDir)
regmatches(dbDir, m)
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}([[:digit:]]{3})",dbDir)
regmatches(dbDir, m)
dbDir
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}([[:digit:]]{3}) ",dbDir)
regmatches(dbDir, m)
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}([[:digit:]]{3}) [[:print:]]",dbDir)
regmatches(dbDir, m)
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}([[:digit:]]{3}) [[:print:]]([[:print:]])",dbDir)
regmatches(dbDir, m)
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}([[:digit:]]{3}) [[:print:]]([[:print:]]+)",dbDir)
regmatches(dbDir, m)
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}([[:digit:]]{3}) [[:print:]]([[:print:]]+)[[:print:]][0-9]",dbDir)
regmatches(dbDir, m)
# Builds a set of queries to extract physical activity related variables given a accelerometry data frame.
getobs <- function(dbDir, data, timeunit = "min", minweartime = 600){
# Builds a set of queries to extract physical activity related variables given a accelerometry data frame.
# Args:
#   dbDir: The name of the file which the data were read from.
#   data: Accelerometry data frame plus activity and phisical intensity columns.
#   timeunit: Time units for the time-derived variables.
#
# Returns:
#   A data frame.
#Default time unit
tu <- 60
if(timeunit =="sec"){
tu <- 1
}else if(timeunit == "min"){
tu <- 60
}else if(timeunit == "hour"){
tu <- 3600
}else{
print("Wrong time unit. Valid parameters: 'sec','min','hour'")
print("default time unit:'min'")
}
epoch <- as.double(data[2,1])-as.double(data[1,1])
tomin <- as.numeric(tu/epoch)*1.0
data$weekday <- weekdays(data$day_m2m, abbreviate=T)
saturday <- weekdays(as.Date(c("2013-07-13")),abbreviate=T)
saturday <- as.data.frame(saturday)
sunday <- weekdays(as.Date(c("2013-07-14")),abbreviate=T)
sunday <- as.data.frame(sunday)
weekend <- weekdays(as.Date(c("2013-07-13","2013-07-14")),abbreviate=T) #Saturday and sunday
midweek <- unique(data$weekday)
midweek <- subset(midweek, subset= !(midweek%in%weekend) )
weekend <- as.data.frame(weekend)
midweek <- as.data.frame(midweek)
#Extract the participant id
m<-regexec("\\\\[[:print:]]+\\\\[A-Z]{3}[[:digit:]][A-Z][[:digit:]]{5}([[:digit:]]{3}) [[:print:]]([[:print:]]+)[[:print:]][0-9]",dbDir)
regmatches(dbDir, m)
PID <- regmatches(dbDir, m)[[1]][2]
PID <- as.data.frame(PID)
Measure <- regmatches(dbDir, m)[[1]][3]
Measure <- as.data.frame(Measure)
#Query: Wearing time (min) per day
q_wtpd <- paste("SELECT day_m2m, count(axis1)*1.0/",tomin," as wearTime, weekday
FROM data WHERE activity = 'wear'
GROUP BY day_m2m", sep="")
#Query: valid days
q_vd <- paste("SELECT day_m2m, weekday FROM (",q_wtpd,") WHERE wearTime >=", minweartime)
#Query: number of valid days
q_nvd <- paste("SELECT count(day_m2m) as valdays FROM (",q_vd,")")
#Query: number of valid days (midweek)
q_nvd_wk <- paste("SELECT count(day_m2m) as valwkdays FROM (",q_vd,"), midweek WHERE weekday = midweek")
#Query: number of valid days (weekend)
q_nvd_wd <- paste("SELECT count(day_m2m) as valwkend FROM (",q_vd,"), weekend WHERE weekday = weekend")
#Extract only obs classified as wear and valid
q_wearobs <- paste("SELECT * FROM data as d JOIN (",q_vd,") as vd
WHERE d.activity = 'wear' AND d.day_m2m = vd.day_m2m ")
q_sleepNWobs <- paste("SELECT * FROM data as d JOIN (",q_vd,") as vd
WHERE (d.activity = 'sleep' OR d.activity = 'non-wear') AND d.day_m2m = vd.day_m2m ")
dt <- "all"
#Query: mean wake/wear time per day
q_MeanWakeWear <- paste("SELECT avg(Time) as ", dt,"MeanWakeWear
FROM
(SELECT day_m2m, count(axis1)*1.0/",tomin," as Time, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: mean sleep and nonwear time per day
q_MeanSleepNW <- paste("SELECT avg(Time) as ", dt,"MeanSleepNW
FROM
(SELECT day_m2m, count(axis1)*1.0/",tomin," as Time, weekday FROM
(",q_sleepNWobs,") GROUP BY day_m2m)",sep = "")
#Queries: physical activity intensities
q_mv <- createQueryIntensity(colName = "intensityEV", intensities = c("moderate","vigorous"),dayType=dt,tomin, q_data=q_wearobs)
q_v <- createQueryIntensity(colName = "intensityEV", intensities = c("vigorous"),dayType=dt,tomin, q_data=q_wearobs)
q_m <- createQueryIntensity(colName = "intensityEV", intensities = c("moderate"),dayType=dt,tomin, q_data=q_wearobs)
q_l <- createQueryIntensity(colName = "intensityEV", intensities = c("light"),dayType=dt,tomin, q_data=q_wearobs)
q_s <- createQueryIntensity(colName = "intensityEV", intensities = c("sedentary"),dayType=dt,tomin, q_data=q_wearobs)
#Query: Mean daily total intensity counts
q_MeanActCounts <- paste("SELECT avg(Counts) as ", dt,"MeanActCounts
FROM
(SELECT day_m2m, sum(axis1) as Counts, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: Mean intensity count per minute
q_MeanIntenPerMin <- paste("SELECT avg(axis1)*1.0*",tomin," as ", dt,"MeanIntenPerMin FROM
(",q_wearobs,")",sep = "")
#Extract only obs classified as wear and valid (MIDWEEK)
q_wearobs <- paste("SELECT *
FROM midweek as w, data as d JOIN (",q_vd,") as vd
WHERE d.activity = 'wear' AND d.day_m2m = vd.day_m2m AND (d.weekday = w.midweek)")
q_sleepNWobs <- paste("SELECT *
FROM midweek as w,data as d JOIN (",q_vd,") as vd
WHERE (d.activity = 'sleep' OR d.activity = 'non-wear')
AND (d.day_m2m = vd.day_m2m) AND (d.weekday = w.midweek) ")
dt <- "WKDAY"
#Query: mean wake/wear time per day
q_MeanWakeWear_wk <- paste("SELECT avg(Time) as ", dt,"MeanWakeWear
FROM
(SELECT day_m2m, count(axis1)*1.0/",tomin," as Time, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: mean sleep and nonwear time per day
q_MeanSleepNW_wk <- paste("SELECT avg(Time) as ", dt,"MeanSleepNW
FROM
(SELECT day_m2m, count(axis1)*1.0/",tomin," as Time, weekday FROM
(",q_sleepNWobs,") GROUP BY day_m2m)",sep = "")
#Queries: physical activity intensities (MIDWEEK)
q_mv_wk <- createQueryIntensity(colName = "intensityEV", intensities = c("moderate","vigorous"),dayType=dt, tomin,q_data=q_wearobs)
q_v_wk <- createQueryIntensity(colName = "intensityEV", intensities = c("vigorous"),dayType=dt, tomin,q_data=q_wearobs)
q_m_wk <- createQueryIntensity(colName = "intensityEV", intensities = c("moderate"),dayType=dt, tomin,q_data=q_wearobs)
q_l_wk <- createQueryIntensity(colName = "intensityEV", intensities = c("light"),dayType=dt, tomin,q_data=q_wearobs)
q_s_wk <- createQueryIntensity(colName = "intensityEV", intensities = c("sedentary"),dayType=dt, tomin,q_data=q_wearobs)
#Query: Mean daily total intensity counts (midweek)
q_MeanActCounts_wk <- paste("SELECT avg(Counts) as ", dt,"MeanActCounts
FROM
(SELECT day_m2m, sum(axis1) as Counts, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: Mean intensity count per minute (midweek)
q_MeanIntenPerMin_wk <- paste("SELECT avg(axis1)*1.0*",tomin," as ", dt,"MeanIntenPerMin FROM
(",q_wearobs,")",sep = "")
#Extract only obs classified as wear and valid (WEEKEND)
q_wearobs <- paste("SELECT *
FROM weekend as w, data as d JOIN (",q_vd,") as vd
WHERE d.activity = 'wear' AND d.day_m2m = vd.day_m2m AND (d.weekday = w.weekend)")
q_sleepNWobs <- paste("SELECT * FROM weekend as w, data as d JOIN (",q_vd,") as vd
WHERE (d.activity = 'sleep' OR d.activity = 'non-wear')
AND (d.day_m2m = vd.day_m2m) AND (d.weekday = w.weekend) ")
dt <- "WKEND"
#Query: mean wake/wear time per day
q_MeanWakeWear_wd <- paste("SELECT avg(Time) as ", dt,"MeanWakeWear
FROM
(SELECT day_m2m, count(axis1)*1.0/",tomin," as Time, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: mean sleep and nonwear time per day
q_MeanSleepNW_wd <- paste("SELECT avg(Time) as ", dt,"MeanSleepNW
FROM
(SELECT day_m2m, count(axis1)*1.0/",tomin," as Time, weekday FROM
(",q_sleepNWobs,") GROUP BY day_m2m)",sep = "")
#Queries: physical activity intensities (WEEKEND)
q_mv_wd <- createQueryIntensity(colName = "intensityEV", intensities = c("moderate","vigorous"),dayType=dt, tomin,q_data=q_wearobs)
q_v_wd <- createQueryIntensity(colName = "intensityEV", intensities = c("vigorous"),dayType=dt, tomin,q_data=q_wearobs)
q_m_wd <- createQueryIntensity(colName = "intensityEV", intensities = c("moderate"),dayType=dt, tomin,q_data=q_wearobs)
q_l_wd <- createQueryIntensity(colName = "intensityEV", intensities = c("light"),dayType=dt, tomin,q_data=q_wearobs)
q_s_wd <- createQueryIntensity(colName = "intensityEV", intensities = c("sedentary"),dayType=dt, tomin,q_data=q_wearobs)
#Query: Mean daily total intensity counts (weekend)
q_MeanActCounts_wd <- paste("SELECT avg(Counts) as ", dt,"MeanActCounts
FROM
(SELECT day_m2m, sum(axis1) as Counts, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: Mean intensity count per minute (weekend)
q_MeanIntenPerMin_wd <- paste("SELECT avg(axis1)*1.0*",tomin," as ", dt,"MeanIntenPerMin FROM
(",q_wearobs,")",sep = "")
#Extract only obs classified as wear and valid (SUNDAY)
q_wearobs <- paste("SELECT *
FROM sunday as s, data as d JOIN (",q_vd,") as vd
WHERE d.activity = 'wear' AND d.day_m2m = vd.day_m2m AND (d.weekday = s.sunday)")
q_sleepNWobs <- paste("SELECT * FROM sunday as s, data as d JOIN (",q_vd,") as vd
WHERE (d.activity = 'sleep' OR d.activity = 'non-wear')
AND (d.day_m2m = vd.day_m2m) AND (d.weekday = s.sunday) ")
dt <- "SUN"
#Query: mean wake/wear time per day
q_MeanWakeWear_s <- paste("SELECT avg(Time) as ", dt,"MeanWakeWear
FROM
(SELECT day_m2m, count(axis1)*1.0/",tomin," as Time, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: mean sleep and nonwear time per day
q_MeanSleepNW_s <- paste("SELECT avg(Time) as ", dt,"MeanSleepNW
FROM
(SELECT day_m2m, count(axis1)*1.0/",tomin," as Time, weekday FROM
(",q_sleepNWobs,") GROUP BY day_m2m)",sep = "")
#Queries: physical activity intensities (WEEKEND)
q_mv_s <- createQueryIntensity(colName = "intensityEV", intensities = c("moderate","vigorous"),dayType=dt, tomin,q_data=q_wearobs)
q_v_s <- createQueryIntensity(colName = "intensityEV", intensities = c("vigorous"),dayType=dt, tomin,q_data=q_wearobs)
q_m_s <- createQueryIntensity(colName = "intensityEV", intensities = c("moderate"),dayType=dt, tomin,q_data=q_wearobs)
q_l_s <- createQueryIntensity(colName = "intensityEV", intensities = c("light"),dayType=dt, tomin,q_data=q_wearobs)
q_s_s <- createQueryIntensity(colName = "intensityEV", intensities = c("sedentary"),dayType=dt, tomin,q_data=q_wearobs)
#Query: Mean daily total intensity counts (weekend)
q_MeanActCounts_s <- paste("SELECT avg(Counts) as ", dt,"MeanActCounts
FROM
(SELECT day_m2m, sum(axis1) as Counts, weekday FROM
(",q_wearobs,") GROUP BY day_m2m)",sep = "")
#Query: Mean intensity count per minute (weekend)
q_MeanIntenPerMin_s <- paste("SELECT avg(axis1)*1.0*",tomin," as ", dt,"MeanIntenPerMin FROM
(",q_wearobs,")",sep = "")
allqueries <- c(q_nvd,q_nvd_wk,q_nvd_wd,
q_MeanWakeWear,q_MeanSleepNW,q_mv,q_v,q_m,q_l,q_s,q_MeanActCounts,q_MeanIntenPerMin,
q_MeanWakeWear_wk,q_MeanSleepNW_wk,q_mv_wk,q_v_wk,q_m_wk,q_l_wk,q_s_wk,q_MeanActCounts_wk,q_MeanIntenPerMin_wk,
q_MeanWakeWear_wd,q_MeanSleepNW_wd,q_mv_wd,q_v_wd,q_m_wd,q_l_wd,q_s_wd,q_MeanActCounts_wd,q_MeanIntenPerMin_wd,
q_MeanWakeWear_s,q_MeanSleepNW_s,q_mv_s,q_v_s,q_m_s,q_l_s,q_s_s,q_MeanActCounts_s,q_MeanIntenPerMin_s)
allqueries <- sapply(allqueries, FUN = function(i) (paste("(",i,")", sep ="")))
allqueries <- paste(allqueries, collapse=" , ", sep=" , ")
q_full <- paste("SELECT *  FROM", allqueries)
obs <- sqldf(q_full)
valid <- ifelse(obs$valwkdays>=3 && obs$valwkend>=1,1,0)
valid <- as.data.frame(valid)
obs <- cbind(Measure,PID, valid, obs)
return(obs)
q<- "SELECT day_m2m, day_n2n, count(axis1) as MeanSleepNW FROM data
WHERE activity = 'sleep' GROUP BY day_n2n"
q<- "SELECT day_m2m, day_n2n, count(axis1) as MeanSleepNW FROM data
WHERE activity = 'non-wear' GROUP BY day_n2n"
}
main <- function(){
#Time
tnow <- Sys.time()
#Final data set
adata <- data.frame()
#Get datafiles names
dataFiles <- dir(inputdir)
#Open Log output
sink(paste(outputdir,"\\log.txt",collapse="",sep=""))
cat("Log output:\n")
for (d in dataFiles){
#Database location
dbDir <- paste(inputdir,"\\",d,sep="")
cat(d)
valid<-T
#Checks file size
if(file.info(dbDir)$size/1000<8000){
cat("...........Wrong file size\n")
}else{
#0. Read data form the .agd files (SQLite database)
db <- readDatabase(dbDir)
data <- db$data
settings <- db$settings
#1. Quality control checks
epoch <- as.numeric(data[2,1]-data[1,1], units="secs")
if(epoch == 1){
#2 Data aggregation
data15 <- aggregation(15, data)
data60 <- aggregation(60, data)
data15$activity <- rep("wear",nrow(data15)) #Activity (sleep, non-wear, wear/wake)
data60$activity <- rep("wear",nrow(data60)) #Activity (sleep, non-wear, wear/wake)
#2.5. Cleaning (Remove invalid days day of data)
udays <- unique(as.Date(data60$datetime))
lastday <- max(udays)
valdays <- seq(from = as.Date("2014-06-12"),to = as.Date("2014-06-19"), by =1)
rmday <- udays[!(udays %in% valdays)]
data15 <- removeData(data15,toremove=c(rmday),units="days")
data60 <- removeData(data60,toremove=c(rmday),units="days")
#3. Cleaning (Remove sleep hours)
rmhours <- c(seq(0,5),seq(22,23))
data15 <- removeData(data15,toremove=c(rmhours),units="hours")
data60 <- removeData(data60,toremove=c(rmhours),units="hours")
#4. Non-wear period
nWP <- nonWearPeriods(data60, scanParam="axis1",innactivity=20,tolerance=0) #nonWearPeriods. Innactivity and tolerance in minutes
data60$activity  <- setActivitySNW(data60$activity,label="non-wear",nWP, minlength = 20)
#5. Wear periods
data60 <- checkWearPeriods(data60,maxc = 20000)
#6. Cleaning (Remove last day of data and more than 7 days of data)
udays <- unique(as.Date(data60$datetime))
firstday <- min(udays)
lastday <- max(udays)
validdays <- seq(firstday,firstday+6,by=1)
daystoremove <- udays[!(udays%in%validdays)]
data15 <- removeData(data15,toremove=c(daystoremove),units="days")
data60 <- removeData(data60,toremove=c(daystoremove),units="days")
#7. Add intensity physical activity
data15 <- mergingActivity(data15,data60)
data15$intensityEV <- mapply(cut_points_evenson,epoch=15, data15$axis1)
data60$intensityEV <- mapply(cut_points_evenson,epoch=60, data60$axis1)
#8. Get the datafile observation for the final data frame(only wear periods)
ob <- getobs(dbDir,data15, timeunit="min", minweartime=200)
#Copies the final data frame in the clipboard
#write.csv(ob,file="clipboard", row.names=F)
adata<-rbind(adata,ob)
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
if(valid==T){
cat("........OK\n")
}else{
cat("........INVALID\n")
}
}else{
cat("........SKIPPED (Wrong epoch) \n")
}
}
}
sink()
write.csv(adata,file=paste(outputdir,"\\",outputfile, sep="",collapse=""), row.names=F)
print(paste("Total time:", as.numeric(Sys.time()-tnow,units="mins")," mins"))
}
#=============================================================================
tryCatch(main(),finally=sink())
tnow <- Sys.time()
dataFiles <- dir(inputdir)
inputdir <- ".\\ISCOLE"
outputdir <- ".\\output"
dataFiles <- dir(inputdir)
dataFiles
